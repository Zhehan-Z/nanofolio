---
import type { CollectionEntry } from "astro:content";
import { dateRange } from "@lib/utils";
import Link from "@components/Link.astro";
import BaseCard from "./BaseCard.astro";
import { ExperienceProjectType } from "../consts";
import { useTranslations } from '../i18n/config';
import { DURATIONS, EASINGS, DELAYS } from '../lib/animations';

interface Props {
  entry: CollectionEntry<"experience"> & { Content: any };
  defaultOpen?: boolean;
  lang?: string;
}

const { entry, defaultOpen = false, lang = 'en' } = Astro.props as Props & { lang?: "en" | "zh-CN" };
const t = useTranslations(lang);

function getProjectTypeLabel(type: ExperienceProjectType) {
  const labels = {
    [ExperienceProjectType.COURSEWORK]: t('experience.type.coursework'),
    [ExperienceProjectType.RESEARCH]: t('experience.type.research'),
    [ExperienceProjectType.INTERNSHIP]: t('experience.type.internship'),
    [ExperienceProjectType.VOLUNTEER]: t('experience.type.volunteer'),
    [ExperienceProjectType.EXTRACURRICULAR]: t('experience.type.extracurricular'),
    [ExperienceProjectType.THESIS]: t('experience.type.thesis'),
    [ExperienceProjectType.INDEPENDENT_STUDY]: t('experience.type.independent_study'),
    [ExperienceProjectType.TEACHING]: t('experience.type.teaching'),
    [ExperienceProjectType.WORKSHOP]: t('experience.type.workshop'),
    [ExperienceProjectType.COMPETITION]: t('experience.type.competition'),
    [ExperienceProjectType.PUBLICATION]: t('experience.type.publication'),
    [ExperienceProjectType.PRESENTATION]: t('experience.type.presentation'),
    [ExperienceProjectType.LAB_WORK]: t('experience.type.lab_work'),
    [ExperienceProjectType.STUDY_ABROAD]: t('experience.type.study_abroad'),
    [ExperienceProjectType.CERTIFICATION]: t('experience.type.certification')
  };
  return labels[type] || type;
}
---

<BaseCard>
  <div class="expandable-card group p-4" tabindex="0" role="button">
    <div class="space-y-3">
      <div class="flex flex-wrap items-center gap-2 text-xs opacity-75">
        <span>{dateRange(entry.data.dateStart, entry.data.dateEnd, lang, t)}</span>
        <span>•</span>
        <span>{getProjectTypeLabel(entry.data.projectType)}</span>
      </div>
      <div class="font-semibold text-lg text-black dark:text-white">
        {entry.data.title}
      </div>
      <div class="text-sm">
        {entry.data.description}
      </div>
      {entry.data.course && (
        <div class="text-xs opacity-75">
          {entry.data.course}
          {entry.data.instructor && ` • ${entry.data.instructor}`}
        </div>
      )}
      <div class="text-xs opacity-75">
        {entry.data.role}
      </div>
      <div class="flex flex-wrap gap-1.5">
        {entry.data.technologies.map(tech => (
          <span class="text-[11px] px-1.5 py-0.5 rounded-full bg-black/5 dark:bg-white/10">
            {tech}
          </span>
        ))}
      </div>
      {entry.data.links && entry.data.links.length > 0 && (
        <div class="flex gap-2 text-sm">
          {entry.data.links.map(link => (
            <Link href={link.url} external>
              {link.icon && (
                <span class="mr-1">{link.icon}</span>
              )}
              {link.text}
            </Link>
          ))}
        </div>
      )}
    </div>
    <div class="expandable-content" data-expanded={defaultOpen}>
      <div class="content-wrapper">
        <div class="mt-4 prose-sm prose dark:prose-invert max-w-none">
          <div class="font-serif">
            <entry.Content />
          </div>
        </div>
      </div>
    </div>
    <div 
      class="expand-button w-full py-1.5 mt-1.5 text-xs border-t border-black/10 dark:border-white/10 opacity-75 group-hover:opacity-100 transition-opacity duration-300"
      aria-hidden="true">
      <div class="flex items-center justify-center gap-1">
        <span class="expand-text" data-show-more={t('card.show-more')} data-show-less={t('card.show-less')}>
          {t('card.show-more')}
        </span>
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 24 24"
          class="size-3.5 stroke-2 fill-none stroke-current expand-icon transition-transform duration-700">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </div>
    </div>
  </div>
</BaseCard>

<style define:vars={{
  contentTransition: `max-height ${DURATIONS.content}ms ${EASINGS.easeInOutCubic}`,
  wrapperTransition: `opacity ${DURATIONS.normal}ms ${EASINGS.easeInOutCubic} ${DELAYS.content}ms,
                      transform ${DURATIONS.normal}ms ${EASINGS.easeOutBack} ${DELAYS.content}ms`,
}}>
  .expandable-content {
    position: relative;
    max-height: 12rem;
    overflow: hidden;
    transition: var(--contentTransition);
  }

  .content-wrapper {
    opacity: 1;
    transform: translateY(0);
    transition: var(--wrapperTransition);
  }

  .expandable-content[data-expanded="true"] {
    max-height: 100rem;
  }

  .expandable-content[data-expanded="true"] .content-wrapper {
    transform: translateY(0);
    opacity: 1;
  }

  .expandable-content[data-expanded="false"] .content-wrapper {
    opacity: 0.75;
    transform: translateY(0);
  }

  .expandable-content[data-expanded="true"] + .expand-button .expand-icon {
    transform: rotate(180deg);
  }

  @media (prefers-reduced-motion: reduce) {
    .expandable-content,
    .content-wrapper,
    .expand-icon {
      transition: none;
    }
  }
</style>

<script>
  function initializeExpandableCards() {
    document.querySelectorAll('.expandable-card').forEach(card => {
      const content = card.querySelector('.expandable-content');
      const text = card.querySelector('.expand-text');
      const showMore = text?.getAttribute('data-show-more') || 'Show more';
      const showLess = text?.getAttribute('data-show-less') || 'Show less';

      function toggleExpand(e: Event) {
        // Don't expand if clicking a link
        if ((e.target as HTMLElement).closest('a')) return;
        
        if (!content || !text) return;
        const isExpanded = content.getAttribute('data-expanded') === 'true';
        content.setAttribute('data-expanded', (!isExpanded).toString());
        text.textContent = isExpanded ? showMore : showLess;
      }

      // Handle click events
      card.addEventListener('click', toggleExpand);

      // Handle keyboard events for accessibility
      card.addEventListener('keydown', (e) => {
        const event = e as KeyboardEvent;
        if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          toggleExpand(event);
        }
      });
    });
  }

  // Initialize on page load
  initializeExpandableCards();

  // Re-initialize on client-side navigation
  document.addEventListener('astro:after-swap', initializeExpandableCards);
</script>