---
import type { Photo } from '../lib/types';

interface Props {
  images: Photo[];
}

const { images } = Astro.props;
---

<style is:global>
  /* 防止页面横向滚动 */
  html, body {
    overflow-x: hidden !important;
    position: relative !important;
    width: 100vw !important;
    max-width: 100vw !important;
  }
</style>

<div class="relative md:w-[400px] md:h-[300px] shrink-0">
  <!-- Mobile: 横向重叠三个圆 -->
  <div class="md:hidden relative w-screen h-[50vw] photo-carousel mt-12 mb-16" style="margin-left: calc(50% - 50vw); margin-right: calc(50% - 50vw); width: 100vw;">
    <div class="absolute parallax -left-[5vw] top-0" data-photo-index="0" data-speed-mobile="1.2" data-speed-desktop="2" data-initial-x="0" data-initial-y="0">
      <img src={images[0].src} alt={images[0].alt} class="w-[50vw] h-[50vw] max-w-none rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0" loading="eager" style="transform-origin: center center;" />
    </div>
    <div class="absolute parallax left-[38vw] top-[10vw]" data-photo-index="1" data-speed-mobile="1" data-speed-desktop="1.5" data-initial-x="0" data-initial-y="0">
      <img src={images[1].src} alt={images[1].alt} class="w-[40vw] h-[40vw] max-w-none rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0" loading="eager" style="transform-origin: center center;" />
    </div>
    <div class="absolute parallax left-[70vw] top-[5vw]" data-photo-index="2" data-speed-mobile="0.5" data-speed-desktop="0.8" data-initial-x="0" data-initial-y="0">
      <img src={images[2].src} alt={images[2].alt} class="w-[35vw] h-[35vw] max-w-none rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0" loading="eager" style="transform-origin: center center;" />
    </div>
  </div>

  <!-- Desktop: Three rotating circles -->
  <div class="hidden md:block w-full h-full transform translate-x-4 photo-carousel">
    <!-- Large circle -->
    <div
      class="absolute -right-6 top-0 parallax"
      data-photo-index="0"
      data-speed-mobile="1.2"
      data-speed-desktop="2"
      data-initial-x="0"
      data-initial-y="3"
    >
      <img
        src={images[0].src}
        alt={images[0].alt}
        class="size-52 rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0"
        loading="eager"
      />
    </div>
    <!-- Medium circle -->
    <div
      class="absolute right-24 top-28 parallax"
      data-photo-index="1"
      data-speed-mobile="1"
      data-speed-desktop="1"
      data-initial-x="0"
      data-initial-y="8"
    >
      <img
        src={images[1].src}
        alt={images[1].alt}
        class="size-40 rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0"
        loading="eager"
      />
    </div>
    <!-- Small circle -->
    <div
      class="absolute right-12 top-60 parallax"
      data-photo-index="2"
      data-speed-mobile="0.9"
      data-speed-desktop="0.5"
      data-initial-x="0"
      data-initial-y="7"
    >
      <img
        src={images[2].src}
        alt={images[2].alt}
        class="size-32 rounded-full object-cover border border-black/10 dark:border-white/10 will-change-[transform,opacity] opacity-0"
        loading="eager"
      />
    </div>
  </div>
</div>

<script>
  import { initializeCarousel } from '../lib/carousel';

  let carouselIntervals: (number | NodeJS.Timeout)[] = [];
  let parallaxRafId: number | null = null;

  function initPhotoCarousels() {
    // Clean up existing intervals
    carouselIntervals.forEach(interval => clearInterval(interval));
    carouselIntervals = [];

    const carousels = document.querySelectorAll('.photo-carousel') as NodeListOf<HTMLElement>;
    carousels.forEach(carousel => {
      const totalPhotos = 9; // Total number of photos
      const interval = initializeCarousel(carousel, totalPhotos, {
        interval: 4000,
        transitionDuration: 600
      });
      carouselIntervals.push(interval);
    });
  }

  function initParallaxEffect() {
    // Clean up existing animation frame
    if (parallaxRafId) {
      cancelAnimationFrame(parallaxRafId);
    }

    const els = Array.from(document.querySelectorAll('.parallax')) as HTMLElement[];
    const isMobile = () => window.matchMedia('(max-width: 768px)').matches;

    const render = () => {
      const vh = window.innerHeight;
      els.forEach(el => {
        const speed = isMobile() ? +(el.dataset.speedMobile || 1) : +(el.dataset.speedDesktop || 1);
        const top = el.getBoundingClientRect().top;
        const translateY = -(top - vh / 2) * speed * 0.05;
        el.style.transform = `translate3d(0, ${translateY}px, 0)`;
      });
      parallaxRafId = requestAnimationFrame(render);
    };

    parallaxRafId = requestAnimationFrame(render);
  }

  function cleanup() {
    carouselIntervals.forEach(interval => clearInterval(interval));
    carouselIntervals = [];
    if (parallaxRafId) {
      cancelAnimationFrame(parallaxRafId);
      parallaxRafId = null;
    }
  }

  function initOnLoad() {
    initPhotoCarousels();
    initParallaxEffect();
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initOnLoad);
  } else {
    initOnLoad();
  }

  // Re-initialize after navigation/language switch
  document.addEventListener('astro:after-swap', initOnLoad);
  
  // Cleanup before navigation
  document.addEventListener('astro:before-swap', cleanup);
</script>