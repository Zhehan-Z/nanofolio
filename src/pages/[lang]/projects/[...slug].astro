---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";
import LanguageNotice from "@components/LanguageNotice.astro";
import { readingTime } from "@lib/utils";
import { getLangFromUrl, useTranslations } from '../../../i18n/config';

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  const paths = [];

  for (const project of projects) {
    if (!project.data.draft) {
      // Get the actual slug without language prefix
      const slug = project.slug.split('/').pop();
      
      // Find all language versions of this project
      const langVersions = projects.filter(p => 
        p.slug.split('/').pop() === slug && 
        !p.data.draft
      );

      // Create paths for all supported languages
      for (const lang of ['en', 'zh-CN']) {
        // Try to find project in current language
        const langProject = langVersions.find(p => p.data.lang === lang);
        
        // If no version in current language exists, use any available version
        const contentProject = langProject || langVersions[0];
        
        if (contentProject) {
          paths.push({
            params: { lang, slug },
            props: contentProject,
          });
        }
      }
    }
  }

  return paths;
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;
const lang = getLangFromUrl(Astro.url);
const { Content } = await project.render();
const t = useTranslations(lang);
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate mb-10 flex flex-col md:flex-row md:items-center gap-2">
      <BackToPrev href={`/${lang}/projects`}>
        {`${t('card.back')}${t('projects.title').toLowerCase()}`}
      </BackToPrev>
      <LanguageNotice contentLang={project.data.lang} />
    </div>
    <div class="space-y-1 mb-4">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        <span>&bull;</span>
        <div class="font-base text-sm">
          {readingTime(project.body, lang, t)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {project.data.title}
      </div>
      {project.data.links && project.data.links.length > 0 && (
        <nav class="animate flex gap-3 text-base">
          {project.data.links.map(link => (
            <Link href={link.url} external>
              {link.icon && (
                <span class="mr-1">{link.icon}</span>
              )}
              {link.text}
            </Link>
          ))}
        </nav>
      )}
    </div>
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>