---
import Head from "@components/Head.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { SITE } from "@consts";
import { getLangFromUrl, useTranslations } from '../i18n/config';

type Props = {
  title: string;
  description: string;
};

const { title, description } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get localized site title
const localizedTitle = t(`meta.${title.toLowerCase()}`) || title;
---

<!doctype html>
<html lang={lang}>
  <head>
    <Head title={`${localizedTitle} â€¢ ${SITE.NAME}`} description={description} />
    <script is:inline>
      // Inline script to handle routing before any content loads
      (function() {
        const path = window.location.pathname;
        
        // Skip for static assets and API routes
        if (path.match(/\.(ico|png|jpg|jpeg|svg|css|js|json|txt|xml)$/) || 
            path.startsWith('/api/') ||
            path.startsWith('/fonts/')) {
          return;
        }

        // Extract and normalize the language code
        const [, lang = ''] = path.split('/');
        const langLower = lang.toLowerCase();
        
        // Define valid languages and their canonical forms
        const validLangs = { 'en': 'en', 'zh-cn': 'zh-CN' };
        
        // Check if we need to redirect
        if (!lang || !(langLower in validLangs)) {
          // No language or invalid language - redirect to preferred language
          const preferred = localStorage.getItem('preferredLanguage') || 
            (navigator.language.toLowerCase().startsWith('zh') ? 'zh-CN' : 'en');
          const newPath = '/' + preferred + path.replace(/^\/[^/]*/, '');
          window.location.replace(newPath.replace(/\/+/g, '/'));
        } else if (validLangs[langLower] !== lang) {
          // Valid language but wrong case - normalize it
          const newPath = path.replace(
            new RegExp(`^/${lang}`), 
            '/' + validLangs[langLower]
          );
          window.location.replace(newPath.replace(/\/+/g, '/'));
        }
      })();
    </script>
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <script>
      import { restoreScrollPosition } from '../lib/scroll';
      
      function init() {
        // Handle scroll restoration
        requestAnimationFrame(() => {
          restoreScrollPosition();
        });
      }
      
      // Initialize on page load and after view transitions
      window.addEventListener('load', init);
      document.addEventListener('astro:page-load', init);
    </script>
  </body>
</html>